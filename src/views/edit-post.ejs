<%- include('partials/header', {title: 'Edit'}) -%>

<head>
  <style>
    textarea {
      width: 100vw;
      /* Sets width to 100% of viewport width */
      /* height: 100vh; /* Sets height to 100% of viewport height */
      box-sizing: border-box;
      /* Ensures padding and border are included in the total width/height */
    }

    /* Style the tab */
    .tab {
      /* overflow: hidden;
  border: 1px solid #ccc;
  background-color: #f1f1f1;*/
    }

    /* Style the buttons inside the tab */
    .tab button {
      /* background-color: inherit;
  float: left;
  border: none;
  outline: none;
  cursor: pointer;
  padding: 14px 16px;
  transition: 0.3s;
  font-size: 17px;*/
    }

    /* Change background color of buttons on hover */
    .tab button:hover {
      background-color: #ddd;
    }

    /* Create an active/current tablink class */
    .tab button.active {
      /*background-color: #ccc;*/
    }

    /* Style the tab content */
    .tabcontent {
      display: none;
      /* padding: 6px 12px;
  border: 1px solid #ccc;
  border-top: none;*/
    }
  </style>

<!-- Auto Complete -->
  <style>
    /*the container must be positioned relative:*/
    .autocomplete {
      position: relative;
      display: inline-block;
    }

    .autocomplete-items {
      position: absolute;
    }

    .autocomplete-items div {
      cursor: pointer;
      background-color: whitesmoke;
    }

    /*when hovering an item:*/
    .autocomplete-items div:hover {
      background-color: #e9e9e9;
    }

    /*when navigating through the items using the arrow keys:*/
    .autocomplete-active {
      background-color: DodgerBlue !important;
      color: whitesmoke;
    }
  </style>
</head>
<%
let title = ''
let labels = ''
let content = ''
if(editting){
  title = post.title
  labels = post.labels
  content = post.content
}
%>
<%if(editting){%><h1>Edit</h1><%}else{%><h1>Create</h1><%}%>
<textarea id="title" name="edit-title" placeholder="Blog Title" rows="1"><%=title%></textarea>
<div class="autocomplete" style="width:300px;">
  <textarea id="labels" name="edit-labels" placeholder="Blog Labels" rows="1"><%=labels%></textarea>
</div>
<div class="tab">
  <button class="tablinks" onclick="openTab(event, 'Info')" id="defaultOpen">Info</button>
  <button class="tablinks" onclick="openTab(event, 'Raw')">Raw</button>
  <button class="tablinks" onclick="openTab(event, 'Pell')">Pell</button>
  <button class="tablinks" onclick="openTab(event, 'SunEditor')">SunEditor</button>
  <button class="tablinks" onclick="openTab(event, 'WYSIHTML')">WYSIHTML (Text Only)</button>
</div>
<div id="Info" class="tabcontent">
  Select an editor
</div>
<div id="Raw" class="tabcontent">
  <%- include('editors/RawEditor') %>
</div>
<div id="Pell" class="tabcontent">
  <%- include('editors/PellEditor', {content}) %>
</div>
<div id="SunEditor" class="tabcontent">
  <%-include('editors/SunEditor', {content}) %>
</div>
<div id="WYSIHTML" class="tabcontent">
  <%-include('editors/WYSIHtml', {content}) %>
</div>
<script>
  // Get the element with id="defaultOpen" and click on it
  document.getElementById("defaultOpen").click();

  function openTab(evt, tabName) {
    var i, tabcontent, tablinks;
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
      tabcontent[i].style.display = "none";
    }
    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
      tablinks[i].className = tablinks[i].className.replace(" active", "");
    }
    document.getElementById(tabName).style.display = "block";
    evt.currentTarget.className += " active";
  }
</script>
<!-- AutoComplete -->
<script>
  function autocomplete(inp, arr) {
    /*the autocomplete function takes two arguments,
    the text field element and an array of possible autocompleted values:*/
    var currentFocus;
    /*execute a function when someone writes in the text field:*/
    inp.addEventListener("input", function(e) {
      var a, b, i, val = this.value;
      /*close any already open lists of autocompleted values*/
      closeAllLists();
      if (!val) return false;
      currentFocus = -1;
      /*create a DIV element that will contain the items (values):*/
      a = document.createElement("DIV");
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items");
      /*append the DIV element as a child of the autocomplete container:*/
      this.parentNode.appendChild(a);
      /*for each item in the array...*/
      for (i = 0; i < arr.length; i++) {
        /*check if the item starts with the same letters as the text field value:*/
        //if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
          /*create a DIV element for each matching element:*/
          b = document.createElement("DIV");
          /*make the matching letters bold:*/
          b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
          b.innerHTML += arr[i].substr(val.length);
          /*insert a input field that will hold the current array item's value:*/
          b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
          /*execute a function when someone clicks on the item value (DIV element):*/
          b.addEventListener("click", function(e) {
            /*insert the value for the autocomplete text field:*/
            inp.value += this.getElementsByTagName("input")[0].value;
            /*close the list of autocompleted values,
            (or any other open lists of autocompleted values:*/
            closeAllLists();
          });
          a.appendChild(b);
        //}
      }
    });
    /*execute a function presses a key on the keyboard:*/
    inp.addEventListener("keydown", function(e) {
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) x = x.getElementsByTagName("div");
      if (e.keyCode == 40) {
        /*If the arrow DOWN key is pressed,
        increase the currentFocus variable:*/
        currentFocus++;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 38) { //up
        /*If the arrow UP key is pressed,
        decrease the currentFocus variable:*/
        currentFocus--;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 13) {
        /*If the ENTER key is pressed, prevent the form from being submitted,*/
        e.preventDefault();
        if (currentFocus > -1) {
          /*and simulate a click on the "active" item:*/
          if (x) x[currentFocus].click();
        }
      }
    });

    function addActive(x) {
      /*a function to classify an item as "active":*/
      if (!x) return false;
      /*start by removing the "active" class on all items:*/
      removeActive(x);
      if (currentFocus >= x.length) currentFocus = 0;
      if (currentFocus < 0) currentFocus = (x.length - 1);
      /*add class "autocomplete-active":*/
      x[currentFocus].classList.add("autocomplete-active");
    }

    function removeActive(x) {
      /*a function to remove the "active" class from all autocomplete items:*/
      for (var i = 0; i < x.length; i++) {
        x[i].classList.remove("autocomplete-active");
      }
    }

    function closeAllLists(elmnt) {
      /*close all autocomplete lists in the document,
      except the one passed as an argument:*/
      var x = document.getElementsByClassName("autocomplete-items");
      for (var i = 0; i < x.length; i++) {
        if (elmnt != x[i] && elmnt != inp) {
          x[i].parentNode.removeChild(x[i]);
        }
      }
    }
    /*execute a function when someone clicks in the document:*/
    document.addEventListener("click", function(e) {
      closeAllLists(e.target);
    });
  }

  /*An array containing all the country names in the world:*/
   const myJsArray = JSON.parse('<%- JSON.stringify(labels) %>');
   const a = JSON.parse('<%- JSON.stringify(common.navbar.getSortedLabels()) %>')
   const labels = a.map(data => data.name)
  /*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/
  autocomplete(document.getElementById("labels"), labels);
</script>
<!-- Footer -->
<%- include('partials/footer') -%>