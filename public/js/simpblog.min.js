const simpblog={apiHost:"http://localhost:3000",postsUrl:"/api/v1/posts",key:""};async function post(t,e){const a=await fetch(simpblog.apiHost+simpblog.apiUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({page:t,limit:e,filter:["id"]})});return await a.json()}async function getPosts(t={page:1,limit:5,filter:null,exclude:null}){t.filter&&(t.filter=t.filter.split(",")),t.exclude&&(t.exclude=t.exclude.split(","));const e=new URL(simpblog.postsUrl,simpblog.apiHost);for(const[a,s]of Object.entries(t))null!=s&&e.searchParams.set(a,s);const a=await fetch(e);if(!a.ok)throw new Error("Network response was not ok");return await a.json()}async function getAllPosts(t={startPage:0,maxResultsPerPage:5},e){const a=await getPosts({page:t.startPage,limit:t.maxResultsPerPage});let s=a.data,o=a.nextPageToken;for(;null!=o;){const a=await getPosts({page:o,limit:t.maxResultsPerPage});s=s.concat(a.data),o=a.nextPageToken,e&&e(a)}return s}async function findPage(t,e=5){let a={};return await getAllPosts(1,e,e=>{const s=e.data.find(e=>e.id==t);s&&(a={postId:s.id,page:e.currentPage})}),a}async function fetchAllPages(t,e=[]){const a=await fetch(t),s=await a.json();console.log(s);const o=e.concat(s.data);if(s.nextPageToken){return fetchAllPages(`http://localhost:3000/api/v1/posts/?limit=1&page=${s.nextPageToken}`,o)}return o}