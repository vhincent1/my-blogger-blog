class SimpBlog{key;host;#t;constructor(t,e){this.key=t,this.host=e||"http://localhost:3000",this.#t={healthContext:"/api/v1/health",postsContext:"/api/v1/posts",pingContext:"/api/v1/ping",archiveContext:"/api/v1/archive",labelsContext:"/api/v1/labels"}}async#e(t,e={page:null,limit:null,filter:null,exclude:null,search:null,type:null},s){const n=new URL(t,this.host);if(null!=e){e.filter&&(e.filter=e.filter.split(",")),e.exclude&&(e.exclude=e.exclude.split(","));for(const[t,s]of Object.entries(e))null!=s&&n.searchParams.set(t,s)}const a=await fetch(n,s);if(!a.ok)throw new Error("Network response was not ok");return await a.json()}getLabels=async t=>this.#e(this.#t.labelsContext,t);checkHealth=async()=>this.#e(this.#t.healthContext);getArchive=async()=>this.#e(this.#t.archiveContext);sendPing=async t=>this.#e(this.#t.pingContext,null,{method:"POST",headers:{"Content-Type":"application/json"}});getPosts=async t=>this.#e(this.#t.postsContext,t);async getAllPosts(t={page:1,maxResultsPerPage:5},e){let s=await getPosts({page:t.page,limit:t.maxResultsPerPage});if(0==s.success)return[];const n=s.responseObject;let a=n.data,o=n.nextPageToken;for(;null!=o;)s=await getPosts({page:o,limit:t.maxResultsPerPage}),a=a.concat(s.responseObject.data),o=s.responseObject.nextPageToken,e&&e(s);return a}async findPage(t,e=5){let s={};return await getAllPosts(1,e,e=>{const n=e.data.find(e=>e.id==t);n&&(s={postId:n.id,page:e.currentPage})}),s}async fetchAllPages(t,e=[]){const s=await fetch(t),n=await s.json(),a=e.concat(n.data);if(n.nextPageToken){const t=`http://localhost:3000/api/v1/posts/?limit=1&page=${n.nextPageToken}`;return fetchAllPages(t,a)}return a}}